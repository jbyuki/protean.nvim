;;; protean
;; implement
function M.send_ntangle_v2()
  ; get code content at current section
	; highlight current section
  M.send_code(hl_elem.name, lines_lit)
end

;; get code content at current section
local found, ntangle_inc = pcall(require, "ntangle-inc")
assert(found)

local buf = vim.api.nvim_get_current_buf()
local row, col = unpack(vim.api.nvim_win_get_cursor(0))

local lnum = row-1
; get hl elem at lnum
if hl_elem and hl_elem.part then
	hl_elem = hl_elem.part
end
; get lines at hl elem

;; get hl elem at lnum
local hl_elem = ntangle_inc.Tto_hl_elem(buf, lnum)

;; get lines at hl elem
local lines = {}
local section_name
if hl_elem then
	local Tangle = require"vim.tangle"
	local ll = Tangle.get_ll_from_buf(buf)
	assert(ll)
	local hl = Tangle.get_hl_from_ll(ll)
	assert(hl)

	lines_lit = hl:getlines_all_lit(hl_elem)
else
  return
end

;; highlight current section
; get lnum for current section hl elem
; get length of current section
; play animation to highlight current section

;; get lnum for current section hl elem
local cur_hl_elem = ntangle_inc.Tto_hl_elem(buf, row-1)
local cur_row = row
while cur_hl_elem and cur_hl_elem.type ~= ntangle_inc.HL_ELEM_TYPE.SECTION_PART do
	cur_row = cur_row - 1
	cur_hl_elem = cur_hl_elem.prev
end

local start_row = cur_row+1

;; get length of current section
local section_length = #lines_lit[hl_elem.name]

;; play animation to highlight current section
vim.schedule(function()
	; invert colors
	vim.defer_fn(function()
		; restore colors
	end, 150)
end)

;; invert colors
local ns = vim.api.nvim_create_namespace("")
vim.api.nvim_set_hl(0, "SendNTPY", { reverse = true })
for i=start_row,start_row+section_length-1 do
	vim.api.nvim_buf_add_highlight(buf, ns, "SendNTPY", i-1, 0, -1)
end

;; restore colors
vim.api.nvim_buf_clear_namespace(buf, ns, 0, -1)

;; variables
local anonymous_section_idx = 1

;; implement
function M.send_ntangle_visual_v2()
  ; get code content at current_section visual v2

  M.send_code(section_name, all_lines)
end

;; get code content at current_section visual v2
local _,slnum,_,_ = unpack(vim.fn.getpos("v"))
local _,elnum,_,_ = unpack(vim.fn.getpos("."))
if slnum > elnum then
	slnum ,elnum = elnum ,slnum
end
local buf = vim.api.nvim_get_current_buf()

local found, ntangle_inc = pcall(require, "ntangle-inc")
assert(found)

; get part hl elem for visual

local all_lines = {}
for lnum=slnum-1,elnum-1 do
  ; get hl elem at lnum
  ; append lines from hl elem
end

;; append lines from hl elem
if hl_elem then
	local Tangle = require"vim.tangle"
	local ll = Tangle.get_ll_from_buf(buf)
	assert(ll)
	local hl = Tangle.get_hl_from_ll(ll)
	assert(hl)

	hl:getlines_single_lit(hl_elem, section_name, all_lines)
else
  return
end

;; get part hl elem for visual
local lnum = slnum-1
; get hl elem at lnum
if hl_elem and hl_elem.part then
	hl_elem = hl_elem.part
end

local section_name = hl_elem.name
