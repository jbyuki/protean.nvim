;;; protean
;; implement
function M.connect(port, on_connected, on_not_connected, max_retries, filetype)
  ; client coroutine
  ; connect to server function
  ; connect to server
end

;; variables
local client

;; connect to server function
local try_connect
try_connect = function(num_retries)
  if num_retries > max_retries then
    if not on_not_connected then
      vim.api.nvim_echo({{"Could not connect to server", "Error"}}, true, {})
    else
      vim.schedule(function() on_not_connected() end)
    end
    return
  end

  client = vim.uv.new_tcp()
  client:connect("127.0.0.1", port, vim.schedule_wrap(function(err)
    if err then
      if client then
        client:close()
      end
      client = nil
      vim.defer_fn(function() try_connect(num_retries+1) end, 250*(num_retries+1))
      return
    end

    if on_connected then
      vim.schedule(function() on_connected() end)
    end

    ; if javascript send importmap configurations
    client:read_start(vim.schedule_wrap(function(err, data)
      if err then
        vim.schedule(function()
          vim.api.nvim_echo({{err, "Error"}}, true, {})
        end)
      end
      if data then
        ; add data to received data
        coroutine.resume(client_co)
      else
        client:close()
        client = nil
      end
    end))
  end))
end

;; connect to server
try_connect(0)

;; variables
local client_co

;; client coroutine
client_co = coroutine.create(function()
  while true do
    ; wait for code to send
    ; send code to server
    ; wait for response from server
  end
end)

; clear client states
coroutine.resume(client_co)

;; variables
local send_queue = {}

;; clear client states
send_queue = {}

;; wait for code to send
while #send_queue == 0 do
  coroutine.yield()
end

;; implement
function M.send_code(name, lines_lit)
  for section_name, lines in pairs(lines_lit) do
    if section_name ~= name then
      local msg = {}
      msg.cmd = "execute"
      msg.data = {}
      msg.data.name = section_name
      msg.data.lines = lines
      msg.data.execute = false
      table.insert(send_queue, msg)
      ; resume client if running otherwise error
    end
  end

  local msg = {}
  msg.cmd = "execute"
  msg.data = {}
  msg.data.name = name
  msg.data.lines = lines_lit[name]
  msg.data.execute = true
  table.insert(send_queue, msg)
  ; resume client if running otherwise error
end

;; resume client if running otherwise error
if client_co and coroutine.status(client_co) == "suspended" then
  coroutine.resume(client_co)
else
  vim.api.nvim_echo({{"Client not connected", "Error"}}, true, {})
end

;; send code to server
local to_send = send_queue[1]
table.remove(send_queue, 1)

local data = vim.json.encode(to_send)
client:write(data .. "\n")

;; variables
local received_data = ""

;; clear client states
received_data = ""

;; add data to received data
received_data = received_data .. data

;;- client coroutine
local read_response = function()
  while true do
    local pos = received_data:find("\n")
    if pos then
      local line = received_data:sub(1,pos-1)
      received_data = received_data:sub(pos+1)
      return vim.json.decode(line)
    else
      coroutine.yield()
    end
  end
end

;; wait for response from server
local response = read_response()
if response.status ~= "Done" then
  vim.api.nvim_echo({{response.status, "Error"}}, true, {})
end

;; implement
function M.try_connect(port, on_connected, filetype)
  if not M.is_connected() then
    M.connect(port, on_connected, function()
      ; start server
      M.connect(port, on_connected, nil, 5, filetype)
    end, 1, filetype)
  else
    if on_connected then
      on_connected()
    end
  end
end

function M.is_connected()
  if client then
    return true
  else
    return false
  end
end

;; variables
local server_handle

;; start server
local err
; create pipes
if filetype == 'python' then
  ; start python server
elseif filetype == 'javascript' then
  ; start javascript server
end
; register pipes callbacks

;; start python server
server_handle, err = vim.uv.spawn("python", {
  stdio = {stdin, stdout, stderr},
  args = {vim.g.protean_server},
  cwd = vim.fn.getcwd(),
}, function(code, signal)
end)

;; create pipes
local stdin = vim.uv.new_pipe()
local stdout = vim.uv.new_pipe()
local stderr = vim.uv.new_pipe()

;; register pipes callbacks
stdout:read_start(function(err, data)
  assert(not err, err)
  ; output server process
end)

stderr:read_start(function(err, data)
  assert(not err, err)
  ; output error server process
end)

;; implement
function M.stop()
  if server_handle then
    server_handle:kill() 
    server_handle = nil
  end
end

;; start javascript server
server_handle, err = vim.uv.spawn("node", {
  stdio = {stdin, stdout, stderr},
  args = {vim.g.protean_js_server},
  cwd = vim.fs.dirname(vim.g.protean_js_server),
}, function(code, signal)
end)
